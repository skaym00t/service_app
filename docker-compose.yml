services:
  web-app:
    build:
      context: . # Путь к Dockerfile, если он не в корне
    ports:
      - "8000:8000" # Порт, на котором будет доступно приложение
    volumes:
      - ./service:/service # Монтируем локальную папку в контейнер(локал/контейнер)
    environment:
      - DB_HOST=database # Имя сервиса базы данных
      - DB_USER=dbuser # Имя пользователя базы данных
      - DB_PASSWORD=pass # Пароль пользователя базы данных
      - DB_NAME=dbname # Имя базы данных

    command: >  # Команда для запуска приложения
      sh -c "python manage.py runserver 0.0.0.0:8000"

    depends_on:
      - database # Зависимость от сервиса базы данных

  database: # Сервис базы данных
    image: postgres:14.6-alpine # Используем образ PostgreSQL
    environment: # Переменные окружения для настройки базы данных
      - POSTGRES_USER=dbuser # Имя пользователя базы данных
      - POSTGRES_PASSWORD=pass # Пароль пользователя базы данных
      - POSTGRES_DB=dbname # Имя базы данных

  redis: # Сервис Redis
    image: redis:7.0.5-alpine # Используем образ Redis
    hostname: redis # Имя хоста для контейнера

  worker: # Сервис для фоновых задач Celery
    build:
      context: . # Путь к Dockerfile, если он не в корне
    hostname: worker # Имя хоста для контейнера
    entrypoint: celery # Команда для запуска Celery
    command: -A celery_app.app worker --loglevel=info # Аргументы для команды Celery(запуск воркера с логированием info)
    volumes:
      - ./service:/service # Монтируем локальную папку в контейнер(локал/контейнер)
    links:
      - redis # Связываем с сервисом Redis(wоркеры будут использовать Redis для очередей задач)
    depends_on:
      - redis # Зависимость от сервиса Redis(чтобы он был запущен перед запуском воркера)

  flower: # Сервис Flower (интерфейс для мониторинга задач Celery)
    build:
      context: . # Путь к Dockerfile, если он не в корне
    hostname: flower # Имя хоста для контейнера
    entrypoint: celery # Команда для запуска Celery
    command: -A celery_app.app flower # Аргументы для команды Celery(запуск Flower)
    volumes:
      - ./service:/service # Монтируем локальную папку в контейнер(локал/контейнер)
    links:
      - redis
    depends_on:
      - redis
    ports:
      - "5555:5555" # Порт, на котором будет доступен Flower